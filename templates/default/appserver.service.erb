#!/usr/bin/env ruby

require 'etc'
require 'digest/md5'

<% @environment.each do |key, value| %>
ENV['<%= key.to_s %>'] = "<%= value.to_s %>"
<% end %>

ROOT_PATH="<%= @deploy_dir %>"
APP_NAME="<%= @app_shortname %>"
PID_PATH="/run/lock/<%= @app_shortname %>/<%= @name %>.pid"
DEPLOY_ENV="<%= @deploy_env %>"

def run_and_print_command(command)
  puts command
  system(command) || exit(1)
end

def run_and_ignore_exitcode_and_print_command(command)
  puts command
  system(command)
end

def running?
  if File.exists?(PID_PATH) && (pid = File.read(PID_PATH).chomp) && system("ps aux | grep #{pid} | grep -v grep > /dev/null")
    pid
  else
    false
  end
end

def different_gemfile?
  current_gemfile = "#{ROOT_PATH}/current/Gemfile.lock"
  if File.exists?(current_gemfile)
    dir = Dir["#{ROOT_PATH}/releases/*"]
    previous_release_path = dir.sort_by { |d| ::File.ctime(d) }[-2]

    if !previous_release_path.nil? && File.exists?("#{previous_release_path}/Gemfile.lock")
      return Digest::MD5.hexdigest(File.read(current_gemfile)) != Digest::MD5.hexdigest(File.read("#{previous_release_path}/Gemfile.lock"))
    end
  end
  false
end

def start
  puts "Starting <%= @name.capitalize %> #{APP_NAME}"
  run_and_ignore_exitcode_and_print_command "cd #{ROOT_PATH}/current && /usr/local/bin/bundle exec <%= @command %>"
end

def stop
  unless running?
    puts "You can't stop <%= @name %>, because it's not running"
    return
  end

  puts "Stopping <%= @name.capitalize %> #{APP_NAME}"
  retries = 10

  pid = `cat #{PID_PATH}`

  loop do
    break if !running? || retries <= 0

    run_and_ignore_exitcode_and_print_command "kill -QUIT #{pid}"
    sleep 1
    retries -= 1
  end

  `rm #{PID_PATH}` if run_and_ignore_exitcode_and_print_command "kill -QUIT #{pid}"
end

def stop_start
  stop
  start
end

def restart
  if running?
    puts "Restarting <%= @name.capitalize %> #{APP_NAME}"
    run_and_ignore_exitcode_and_print_command "kill -USR2 `cat #{PID_PATH}`"
  else
    start
  end
end

def clean_restart
  if different_gemfile?
    puts "Found a previous version with a different Gemfile: Doing a stop & start"
    stop_start
  else
    puts "No previous version with a different Gemfile found. Assuming a quick restart without re-loading gems is safe"
    restart
  end
end

def status
  if pid = running?
    puts "<%= @name.capitalize %> #{APP_NAME} running with PID #{pid}"
  else
    puts "<%= @name.capitalize %> #{APP_NAME} not running"
  end
end

Process::Sys.setuid(uid = Etc.getpwnam("<%= node['deployer']['user'] %>").uid)
puts "Set <%= @name.capitalize %> process UID to #{uid}"

case ARGV[0]
when "start"
  start
when "stop"
  stop
when "status"
  status
when "restart"
  restart
when "clean-restart"
  clean_restart
when "stop-start"
  stop_start
else
  puts "Usage: {start|stop|status|restart|clean-restart|stop-start}"
  exit 1
end

exit 0
